import type { ProjectRole } from '@n8n/api-types';
import type { CredentialsEntity, CredentialSharingRole, SharedCredentials, SharedWorkflow, WorkflowSharingRole, User, ListQueryDb, ScopesField, ProjectRelation } from '@n8n/db';
import type { GlobalRole, Resource, Scope } from '@n8n/permissions';
import { License } from '../license';
export type RoleNamespace = 'global' | 'project' | 'credential' | 'workflow';
export interface RoleMap {
    global: GlobalRole[];
    project: ProjectRole[];
    credential: CredentialSharingRole[];
    workflow: WorkflowSharingRole[];
}
export type AllRoleTypes = GlobalRole | ProjectRole | WorkflowSharingRole | CredentialSharingRole;
export declare class RoleService {
    private readonly license;
    constructor(license: License);
    rolesWithScope(namespace: 'global', scopes: Scope | Scope[]): GlobalRole[];
    rolesWithScope(namespace: 'project', scopes: Scope | Scope[]): ProjectRole[];
    rolesWithScope(namespace: 'credential', scopes: Scope | Scope[]): CredentialSharingRole[];
    rolesWithScope(namespace: 'workflow', scopes: Scope | Scope[]): WorkflowSharingRole[];
    getRoles(): RoleMap;
    getRoleName(role: AllRoleTypes): string;
    getRoleScopes(role: GlobalRole | ProjectRole | WorkflowSharingRole | CredentialSharingRole, filters?: Resource[]): Scope[];
    getScopesBy(projectRoles: Set<ProjectRole>): Set<Scope>;
    addScopes(rawWorkflow: ListQueryDb.Workflow.WithSharing | ListQueryDb.Workflow.WithOwnedByAndSharedWith, user: User, userProjectRelations: ProjectRelation[]): ListQueryDb.Workflow.WithScopes;
    addScopes(rawCredential: CredentialsEntity, user: User, userProjectRelations: ProjectRelation[]): CredentialsEntity & ScopesField;
    addScopes(rawCredential: ListQueryDb.Credentials.WithSharing | ListQueryDb.Credentials.WithOwnedByAndSharedWith, user: User, userProjectRelations: ProjectRelation[]): ListQueryDb.Credentials.WithScopes;
    combineResourceScopes(type: 'workflow' | 'credential', user: User, shared: SharedCredentials[] | SharedWorkflow[], userProjectRelations: ProjectRelation[]): Scope[];
    isRoleLicensed(role: AllRoleTypes): boolean;
}
